services:

  backend:
    build:
      context: ./backend   # Le chemin vers le répertoire du backend
      dockerfile: Dockerfile # Nom du Dockerfile du backend
    container_name: backend
    ports:
      - "3001:3001"  # Le backend écoute sur le port 3001
    networks:
      - app-network
    depends_on:
      - mariadb
      - mailhog
    environment:
      NODE_ENV: production  # Assurez-vous que votre backend fonctionne en mode production

  frontend:
    build:
      context: ./frontend  # Le répertoire du frontend
      dockerfile: Dockerfile # Dockerfile spécifique pour le frontend
    container_name: frontend
    ports:
      - "8082:3000"  # Next.js écoute sur le port 3000 dans le conteneur
    networks:
      - app-network
    depends_on:
      - backend  # Le frontend dépend du backend
    volumes:
    - ./frontend:/app

  mariadb:
    image: mariadb
    container_name: mariadb
    restart: "no"
    ports:
      - "3307:3306"
    volumes:
      - ./datadb:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: super
      MYSQL_DATABASE: instacfpt2
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: "no"
    ports:
      - "8081:80"
    environment:
      PMA_HOST: mariadb
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: super
    depends_on:
      - mariadb
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - app-network
    
    
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network


  reverse-proxy:
    image: nginx:latest
    container_name: reverse-proxy
    ports:
      - "80:80"  # Reverse proxy accessible sur le port 80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Configuration Nginx personnalisée
    networks:
      - app-network
    depends_on:
      - frontend
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 'admin'
    networks:
      - app-network
    depends_on:
      - prometheus


networks:
  app-network:
    driver: bridge
